from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import json
import csv
import datetime
import time

def get_wildberries_price_selenium(product_id):
    """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é Selenium"""
    url = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        print(f"üîç –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ {product_id}...")
        driver.get(url)
        time.sleep(3)
        
        price = None
        
        # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
        try:
            price_element = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "[class*='priceBlockFinalPrice']"))
            )
            price = price_element.text.strip()
        except:
            pass
        
        if not price:
            try:
                price_elements = driver.find_elements(By.TAG_NAME, "ins")
                for element in price_elements:
                    if '‚ÇΩ' in element.text and any(char.isdigit() for char in element.text):
                        price = element.text.strip()
                        break
            except:
                pass
        
        driver.quit()
        
        return price if price else "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def save_to_json(data, filename="prices.json"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")

def save_to_csv(data, filename="prices.csv"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['ID —Ç–æ–≤–∞—Ä–∞', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', '–°—Å—ã–ª–∫–∞'])
            for item in data:
                writer.writerow([
                    item['product_id'],
                    item['price'],
                    item['date'],
                    item['url']
                ])
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}")

def save_to_excel(data, filename="prices.xlsx"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª"""
    try:
        import pandas as pd
        df = pd.DataFrame(data)
        df.to_excel(filename, index=False)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except ImportError:
        print("‚ùå –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pandas: pip install pandas")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("           –ü–ê–†–°–ï–† –¶–ï–ù WILDBERRIES")
    print("=" * 60)
    
    # –ú–∞—Å—Å–∏–≤ ID —Ç–æ–≤–∞—Ä–æ–≤
    product_ids = [4143984,454254829,4143985,450899573,462230522]  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ ID
    
    results = []
    current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    for product_id in product_ids:
        print(f"\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–≤–∞—Ä ID: {product_id}")
        print(f"üåê –°—Å—ã–ª–∫–∞: https://www.wildberries.ru/catalog/{product_id}/detail.aspx")
        
        price = get_wildberries_price_selenium(product_id)
        print(f"üí∞ –¶–µ–Ω–∞: {price}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'product_id': product_id,
            'price': price,
            'date': current_date,
            'url': f'https://www.wildberries.ru/catalog/{product_id}/detail.aspx'
        }
        results.append(result)
        
        print("-" * 60)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã
    if results:
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        save_to_json(results, "wb_prices.json")
        save_to_csv(results, "wb_prices.csv")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω pandas
        try:
            import pandas
            save_to_excel(results, "wb_prices.xlsx")
        except ImportError:
            print("‚ÑπÔ∏è  –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pandas openpyxl")
    
    print(f"\nüéØ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")

if __name__ == "__main__":
    main()